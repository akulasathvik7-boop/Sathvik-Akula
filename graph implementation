package house;
import java.util.*;
class Edge{
	int src;
	int des;

public Edge(int src,int des){
	this.src=src;
	this.des=des;
	
}
}
public class graph {
	
	public static void createGraph(ArrayList<Edge>graph[]) {
		for(int i=0;i<graph.length;i++) {
			graph[i]=new ArrayList<Edge>();
		}
		graph[0].add(new Edge(0,1));
		graph[0].add(new Edge(0,2));
		
		graph[1].add(new Edge(1,0));
		graph[1].add(new Edge(1,3));

		graph[2].add(new Edge(2,0));
		graph[2].add(new Edge(2,4));

		graph[3].add(new Edge(3,1));
		graph[3].add(new Edge(3,4));
		graph[3].add(new Edge(3,5));

		graph[4].add(new Edge(4,2));
		graph[4].add(new Edge(4,3));
		graph[4].add(new Edge(4,5));

		graph[5].add(new Edge(5,3));
		graph[5].add(new Edge(5,4));
		graph[5].add(new Edge(5,6));

		graph[6].add(new Edge(6,5));
	}
	public static void bfs(ArrayList<Edge>graph[],boolean[]vis,int start) {
		Queue<Integer> q=new LinkedList<>();
		q.add(start);
		while(!q.isEmpty()) {
			int cur=q.remove();
			if(vis[cur]==false) {
				System.out.print(cur+" ");
				vis[cur]=true;
				for(int i=0;i<graph[cur].size();i++) {
					q.add(i);
				}
			}
		}
		}
	public static void dfs(ArrayList<Edge>graph[],boolean[]viss,int cur) {
		System.out.print(cur+" ");
		viss[cur]=true;
		for(int i=0;i<graph[cur].size();i++) {
			Edge e=graph[cur].get(i);
			if(viss[e.des]==false)
				dfs(graph,viss,e.des);
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int v=7;
		ArrayList<Edge> graph[]=new ArrayList[v];
		createGraph(graph);
		boolean vis[]=new boolean[v];
		boolean viss[]=new boolean[v];
		for(int i=0;i<v;i++) {
		if(vis[i]==false) {
			bfs(graph,vis,i);
		}
		}
		System.out.println();
		dfs(graph,viss,0);
		System.out.println();
	}

}
